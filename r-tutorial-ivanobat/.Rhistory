cv.lassobic= kfoldCV.lasso(x=as.matrix(data_logx), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.lassobic= cor(data_y$Y1,cv.lassobic$pred)^2
r2.lassobic
fit.lasso= cv.glmnet(x=as.matrix(data_logx[,(301-149):30]), y=data_y$Y1, nfolds=10)
cv.lassobic= kfoldCV.lasso(x=as.matrix(data_logx[,(301-149):30]), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.lassobic= cor(data_y$Y1,cv.lassobic$pred)^2
r2.lassobic
fit.ridge= cv.glmnet(x=as.matrix(data_logx), y=data_y$Y1, alpha = 0, nfolds=10)
fit.ridge
b.rigde <- as.vector(coef(fit.ridge, s='lambda.min'))
names(b.rigde) <- c('intercept',colnames(data_logx))
length(b.rigde[b.rigde!=0])
cv.ridge= kfoldCV.ridge(x=as.matrix(data_logx), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.ridgecv= cor(data_y$Y1,cv.ridge$pred)^2
r2.ridgecv
b.ridge
n= 100  # No. observations
p= 200  # No. features
rho= 0.5  # True pairwise correlation across features
beta= c(rep(0, p - 4), -2/3, 1/3, 2/3, 1)
# Simulate data
sim.data= simdata.cs(seed = 2, n, beta, phi = 1, rho)
X= sim.data[['x']]  # covariates
y= sim.data[['y']]  # response
# Standardise (relevant for glmnet function)
Xstd= scale(X)
ystd= scale(y)
colnames(Xstd)= paste('X', 1:ncol(Xstd), sep = '')
set.seed(123456)
lambda= cv.glmnet(x = Xstd, y = ystd, nfolds = 10)[['lambda.min']]
gfit= glmnet(x = Xstd, y = ystd, standardize = FALSE, lambda = lambda)
b.lasso= coef(gfit)[-1] #estimated coefficients
sel.lasso= (b.lasso != 0)
sum(sel.lasso) #number of selected covariates
lm.afterlasso= lm(y ~ -1 + X[, sel.lasso])
ci.lasso= matrix(0, nrow = p, ncol = 4)
colnames(ci.lasso) = c('estimate','ci_low','ci_upp', 'p_value')
rownames(ci.lasso) = paste("X",1:ncol(X),sep="")
ci.lasso[sel.lasso, 1:3] = cbind(coef(lm.afterlasso), confint(lm.afterlasso))
ci.lasso[sel.lasso, 4]= summary(lm.afterlasso)$coef[,4]
ci.lasso[!sel.lasso,4]= NA
ci.lasso[,1:3]= round(ci.lasso[,1:3], 3)
ci.lasso[,4]= round(ci.lasso[,4], 4)
ci.lasso[sel.lasso, ]
sel.lasso= rep(FALSE, nrow(ci.lasso))
sel.lasso[ci.lasso[,4] < 0.05]= TRUE
table(sel.lasso, beta != 0)
cols= ifelse(beta < ci.lasso[, 2] | beta > ci.lasso[, 3], 2, 1)
plot(1:p, beta, ylim=1.25*range(ci.lasso[,1:3]), xlim=c(0,nrow(ci.lasso)), ylab='95%CI', xlab='', main='Naive LASSO + OLS')
segments(y0 = ci.lasso[, 2], y1 = ci.lasso[, 3], x0 = 1:nrow(ci.lasso), col = cols)
points(1:p, beta, pch = 16)
ci.lassopost= lassopost(y, X, method.lambda='cv')
knitr::opts_chunk$set(message= FALSE, warning = FALSE)
PATH= '/home/ivanobat/StatModelsInference/Homework_20211017/StatInference_seminar1'
library(hdm)
library(glmnet)
library(ggplot2)
library(tidyverse)
library(HDCI)
library(gridExtra)
source(file.path(PATH,"routines_seminar1.R"))
load(file.path(PATH, 'data/salary.RData'))
xdf= salary
dim(xdf)
head(xdf)
y= salary$lnw
x= model.matrix(~ female + marital + edu + region + exp1 +
female:marital + female:edu + female:region + female:exp1
+ marital:edu + marital:region + marital:exp1 + edu:region + edu:exp1 + region:exp1, data=salary)
dim(x)
head(x[,1:20]) #show first rows for 20 first columns
col <- ifelse(x[,"female"]==1,'female','male')
ggplot(xdf,aes(x=exp1,y=lnw,col=col)) + geom_point(size=0.5) + geom_smooth(method='lm') + xlab('experience (standardized)') + ylab('log hourly wage')+ theme_classic() + theme(legend.position = 'bottom')
expgroups= cut(xdf$exp1,breaks=seq(-2.5,3.5,by=0.5))
edugroup= as.character(xdf$edu); edugroup[edugroup=='hsg' | edugroup=='hsd']= 'hsd or hsg'
m= tapply(exp(xdf$lnw), list(expgroups,xdf$female,edugroup), 'mean')
ylim= c(0,8)
elevels= seq(-2,3.5,by=0.5)
par(mfrow=c(2,2), mar=c(4,4,1,0))
plot(elevels,m[,1,'hsd or hsg'],ylab='Salary',xlab='Experience (stdized)',ylim=ylim,main='Education: hsd or hsg')
points(elevels,m[,2,'hsd or hsg'],col=2,pch=2)
legend('topleft',c('Male','Female'),col=c(1,2),pch=c(1,2))
plot(elevels,m[,1,'sc'],ylab='Salary',xlab='Experience (stdized)',ylim=ylim,main='Education: some college')
points(elevels,m[,2,'sc'],col=2,pch=2)
legend('topleft',c('Male','Female'),col=c(1,2),pch=c(1,2))
plot(elevels,m[,1,'cg'],ylab='Salary',xlab='Experience (stdized)',ylim=ylim,main='Education: college graduate')
points(elevels,m[,2,'cg'],col=2,pch=2)
legend('topleft',c('Male','Female'),col=c(1,2),pch=c(1,2))
plot(elevels,m[,1,'ad'],ylab='Salary',xlab='Experience (stdized)',ylim=ylim,main='Education: advanced degree')
points(elevels,m[,2,'ad'],col=2,pch=2)
legend('topright',c('Male','Female'),col=c(1,2),pch=c(1,2))
fit.mle= lm(y ~ x[,-1]) #1st column in x is the intercept, already added by lm
b.mle= coef(fit.mle)
summary(fit.mle)
cor(fit.mle$fitted.values,y)^2
cv.mle= kfoldCV.mle(y=y,x=data.frame(x[,-1]),K=10,seed=1)
r2.mle= cor(cv.mle$pred, y)^2
r2.mle
fit.lasso= cv.glmnet(x=x[,-1], y=y, nfolds=10)
fit.lasso
plot(fit.lasso)
length(fit.lasso$lambda)
fit.lasso$lambda.min
plot(fit.lasso$glmnet.fit, xvar='lambda')
b.lasso= as.vector(coef(fit.lasso, s='lambda.min'))
round(b.lasso, 3)
#add your code here
fit.lassobic= lasso.bic(y=y,x=x[,-1],extended = FALSE)
b.lassobic= fit.lassobic$coef
names(fit.lassobic)
fit.lassoebic= lasso.bic(y=y,x=x[,-1],extended = TRUE)
b.lassoebic= fit.lassoebic$coef
names(fit.lassoebic)
#add your code here
#add your code here
cv.lasso= kfoldCV.lasso(y=y,x=x[,-1],K=10,seed=1,criterion="cv")
r2.lassocv= cor(y,cv.lasso$pred)^2
r2.lassocv
#add your answer here
cv.lassobic= kfoldCV.lasso(y=y,x=x[,-1],K=10,seed=1,criterion="bic")
r2.lassobic= cor(y,cv.lassobic$pred)^2
r2.lassobic
#add your code and analysis here
fit.ridge= cv.glmnet(x=x[,-1], y=y, alpha = 0, nfolds=10)
fit.ridge
plot(fit.ridge)
plot(fit.ridge$glmnet.fit, xvar='lambda')
b.ridge= as.vector(coef(fit.ridge, s='lambda.min'))
round(b.ridge, 3)
#add your code and analysis here
cv.ridge= kfoldCV.ridge(y=y,x=x[,-1],K=10,seed=1,criterion="cv")
r2.ridgecv= cor(y,cv.ridge$pred)^2
r2.ridgecv
bols= summary(fit.mle)$coef
pvalue= round(bols[,4],4)
col= ifelse(pvalue < 0.05,'red','black')
data.frame(mle= coef(fit.mle)[-1], lassobic= b.lassobic[-1]) %>%
ggplot(aes(x=mle,y=lassobic)) +
geom_point(col = col[-1],shape = "O",size=2) +
geom_abline(slope=1, intercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0, linetype = 'dotted') +
xlab('OLS') +
ylab('LASSO (Lambda BIC)') +
coord_cartesian(xlim=c(-2,0.5),ylim=c(-2,0.5)) +
theme_classic()
data.frame(mle= coef(fit.mle)[-1], ridgebic= b.ridge[-1]) %>%
ggplot(aes(x=mle,y=ridgebic)) +
geom_point(col = col[-1],shape = "O",size=2) +
geom_abline(slope=1, intercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0, linetype = 'dotted') +
xlab('OLS') +
ylab('Ridge (Lambda CV)') +
coord_cartesian(xlim=c(-2,0.5),ylim=c(-2,0.5)) +
theme_classic()
#add your code and analysis here
data_logx <- log(read_csv(file.path(PATH, "data/Vessel_X.txt"), col_names = FALSE))
data_y <- read_csv(file.path(PATH, "data/Vessel_Y.txt"), col_names = FALSE)
data_y <- data_y[,1]
colnames(data_logx)<-sprintf("%s%i","F",seq(100,400,1))
colnames(data_y)<-sprintf("%s%i","Y",seq(1,ncol(data_y)))
data<-cbind(data_logx,data_y)
df <- data.frame(frequency = seq(100,400,1), mean = colMeans(data_logx), variance = diag(cov(data_logx)))
p1 <- ggplot(df)+geom_line(aes(y=mean,x=frequency)) + geom_vline(xintercept = c(102, 120, 144, 194, 228, 253, 319, 355,385),col="grey")
# p2 <- ggplot(df)+geom_line(aes(y=variance,x=frequency))+geom_vline(xintercept = c(102, 120, 144, 194, 228, 253, 319, 355,385),col="grey")
p1
# grid.arrange(p1, p2, ncol=2)
low<-data %>%
dplyr::arrange(Y1) %>%
dplyr::slice(1:15) %>%
dplyr::select(-Y1) %>%
summarise_all(median)
high<-data %>%
dplyr::arrange(Y1) %>%
dplyr::slice((n()-15):n()) %>%
dplyr::select(-Y1) %>%
summarise_all(median)
df<-data.frame(frecuencia = seq(100,400,1), bajo = as.numeric(low), alto = as.numeric(high))
ggplot(df,aes(x=frecuencia)) +
geom_line(aes(y=bajo,col="lowest")) +
geom_line(aes(y=alto,col="largest")) +
ylab("Median") +
xlab("Frequency") +
labs(color="Content") +
theme(plot.title = element_text(size = 10, face = "bold"),
legend.position="bottom",
legend.title = element_text(size = 10)) +
geom_vline(xintercept = c(100, 120, 145, 194, 253, 319, 355, 385),col="grey")
mle_vessel <- lm(Y1~., data = data)
summary(mle_vessel)
mle_vessel <- lm(Y1~., data = data[,(302-150):302])
summary(mle_vessel)
cv.mle= kfoldCV.mle(y=data$Y1,x=data[,(302-150):301],K=10,seed=1)
r2.mle= cor(cv.mle$pred, data$Y1)^2
r2.mle
fit.lasso= cv.glmnet(x=as.matrix(data_logx), y=data_y$Y1, nfolds=10)
fit.lasso
b.lasso <- as.vector(coef(fit.lasso, s='lambda.min'))
names(b.lasso) <- c('intercept',colnames(data_logx))
b.lasso[b.lasso!=0]
cv.lassobic= kfoldCV.lasso(x=as.matrix(data_logx), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.lassobic= cor(data_y$Y1,cv.lassobic$pred)^2
r2.lassobic
fit.lasso= cv.glmnet(x=as.matrix(data_logx[,(301-149):30]), y=data_y$Y1, nfolds=10)
cv.lassobic= kfoldCV.lasso(x=as.matrix(data_logx[,(301-149):30]), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.lassobic= cor(data_y$Y1,cv.lassobic$pred)^2
r2.lassobic
fit.ridge= cv.glmnet(x=as.matrix(data_logx), y=data_y$Y1, alpha = 0, nfolds=10)
fit.ridge
b.rigde <- as.vector(coef(fit.ridge, s='lambda.min'))
names(b.rigde) <- c('intercept',colnames(data_logx))
length(b.rigde[b.rigde!=0])
cv.ridge= kfoldCV.ridge(x=as.matrix(data_logx), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.ridgecv= cor(data_y$Y1,cv.ridge$pred)^2
r2.ridgecv
b.ridge
n= 100  # No. observations
p= 200  # No. features
rho= 0.5  # True pairwise correlation across features
beta= c(rep(0, p - 4), -2/3, 1/3, 2/3, 1)
# Simulate data
sim.data= simdata.cs(seed = 2, n, beta, phi = 1, rho)
X= sim.data[['x']]  # covariates
y= sim.data[['y']]  # response
# Standardise (relevant for glmnet function)
Xstd= scale(X)
ystd= scale(y)
colnames(Xstd)= paste('X', 1:ncol(Xstd), sep = '')
set.seed(123456)
lambda= cv.glmnet(x = Xstd, y = ystd, nfolds = 10)[['lambda.min']]
gfit= glmnet(x = Xstd, y = ystd, standardize = FALSE, lambda = lambda)
b.lasso= coef(gfit)[-1] #estimated coefficients
sel.lasso= (b.lasso != 0)
sum(sel.lasso) #number of selected covariates
lm.afterlasso= lm(y ~ -1 + X[, sel.lasso])
ci.lasso= matrix(0, nrow = p, ncol = 4)
colnames(ci.lasso) = c('estimate','ci_low','ci_upp', 'p_value')
rownames(ci.lasso) = paste("X",1:ncol(X),sep="")
ci.lasso[sel.lasso, 1:3] = cbind(coef(lm.afterlasso), confint(lm.afterlasso))
ci.lasso[sel.lasso, 4]= summary(lm.afterlasso)$coef[,4]
ci.lasso[!sel.lasso,4]= NA
ci.lasso[,1:3]= round(ci.lasso[,1:3], 3)
ci.lasso[,4]= round(ci.lasso[,4], 4)
ci.lasso[sel.lasso, ]
sel.lasso= rep(FALSE, nrow(ci.lasso))
sel.lasso[ci.lasso[,4] < 0.05]= TRUE
table(sel.lasso, beta != 0)
cols= ifelse(beta < ci.lasso[, 2] | beta > ci.lasso[, 3], 2, 1)
plot(1:p, beta, ylim=1.25*range(ci.lasso[,1:3]), xlim=c(0,nrow(ci.lasso)), ylab='95%CI', xlab='', main='Naive LASSO + OLS')
segments(y0 = ci.lasso[, 2], y1 = ci.lasso[, 3], x0 = 1:nrow(ci.lasso), col = cols)
points(1:p, beta, pch = 16)
ci.lassopost= lassopost(y, X, method.lambda='cv')
round(ci.lassopost[ci.lassopost[,1] != 0,], 4)
ci.lassopost= lassopost(y, X, method.lambda='bic')
round(ci.lassopost[ci.lassopost[,1] != 0,], 4)
sel.lassopost= rep(FALSE, nrow(ci.lassopost))
sel.lassopost[ci.lassopost[,4] < 0.05]= TRUE
table(sel.lassopost, beta != 0)
plot(NA, ylim=1.25*range(ci.lasso[,1:3]), xlim=c(0,nrow(ci.lassopost)), ylab='95% CI', xlab='', main='LASSO + PoSI')
grid()
cols= ifelse(beta < ci.lassopost[, 2] | beta > ci.lassopost[, 3], 2, 1)
segments(y0 = ci.lassopost[, 2], y1 = ci.lassopost[, 3], x0 = 1:nrow(ci.lassopost), col = cols)
points(1:p, beta, pch = 16)
bootlasso <- bootLasso(X, y, B = 500, type.boot = "paired", alpha = 0.05)
ci.bootlasso <- t(bootlasso$interval)
df <- data.frame(sprintf("X%s",seq(1:ncol(X))),bootlasso$Beta,ci.bootlasso)
colnames(df) <- c('variable','estimate','ci.low','ci.up')
df[df$estimate != 0,]
sel.bootlasso= rep(TRUE, nrow(df))
sel.bootlasso[(0 >= df$ci.low) & (0 <= df$ci.up)] <- FALSE
table(sel.bootlasso, beta != 0)
plot(NA, ylim=1.25*range(ci.lasso[,1:3]), xlim=c(0,nrow(ci.bootlasso)), ylab='95% CI', xlab='', main='Bootstrap LASSO')
cols= ifelse(beta < ci.bootlasso[, 1] | beta > ci.bootlasso[, 2], 2, 1)
segments(y0 = ci.bootlasso[, 1], y1 = ci.bootlasso[, 2], x0 = 1:nrow(ci.bootlasso), col = cols)
points(1:p, beta, pch = 16)
spam <- read.table(file.path(PATH, 'data/spam.data'), quote="\"", comment.char="")
spam.names <- c(read.table("data/spambase.names", sep = ":", skip = 33, nrows = 53, as.is = TRUE)[,
1], "char_freq_#", read.table("data/spambase.names", sep = ":", skip = 87, nrows = 3,
as.is = TRUE)[, 1], "spam.01")
names(spam) <- spam.names
spam <- spam[sample(nrow(spam)),]
knitr::opts_chunk$set(message= FALSE, warning = FALSE)
rm(list=ls())
knitr::opts_chunk$set(message= FALSE, warning = FALSE)
rm(list=ls())
knitr::opts_chunk$set(message= FALSE, warning = FALSE)
PATH= '/home/ivanobat/StatModelsInference/Homework_20211017/StatInference_seminar1'
library(hdm)
library(glmnet)
library(ggplot2)
library(tidyverse)
library(HDCI)
library(gridExtra)
source(file.path(PATH,"routines_seminar1.R"))
load(file.path(PATH, 'data/salary.RData'))
xdf= salary
dim(xdf)
head(xdf)
y= salary$lnw
x= model.matrix(~ female + marital + edu + region + exp1 +
female:marital + female:edu + female:region + female:exp1
+ marital:edu + marital:region + marital:exp1 + edu:region + edu:exp1 + region:exp1, data=salary)
dim(x)
head(x[,1:20]) #show first rows for 20 first columns
col <- ifelse(x[,"female"]==1,'female','male')
ggplot(xdf,aes(x=exp1,y=lnw,col=col)) + geom_point(size=0.5) + geom_smooth(method='lm') + xlab('experience (standardized)') + ylab('log hourly wage')+ theme_classic() + theme(legend.position = 'bottom')
expgroups= cut(xdf$exp1,breaks=seq(-2.5,3.5,by=0.5))
edugroup= as.character(xdf$edu); edugroup[edugroup=='hsg' | edugroup=='hsd']= 'hsd or hsg'
m= tapply(exp(xdf$lnw), list(expgroups,xdf$female,edugroup), 'mean')
ylim= c(0,8)
elevels= seq(-2,3.5,by=0.5)
par(mfrow=c(2,2), mar=c(4,4,1,0))
plot(elevels,m[,1,'hsd or hsg'],ylab='Salary',xlab='Experience (stdized)',ylim=ylim,main='Education: hsd or hsg')
points(elevels,m[,2,'hsd or hsg'],col=2,pch=2)
legend('topleft',c('Male','Female'),col=c(1,2),pch=c(1,2))
plot(elevels,m[,1,'sc'],ylab='Salary',xlab='Experience (stdized)',ylim=ylim,main='Education: some college')
points(elevels,m[,2,'sc'],col=2,pch=2)
legend('topleft',c('Male','Female'),col=c(1,2),pch=c(1,2))
plot(elevels,m[,1,'cg'],ylab='Salary',xlab='Experience (stdized)',ylim=ylim,main='Education: college graduate')
points(elevels,m[,2,'cg'],col=2,pch=2)
legend('topleft',c('Male','Female'),col=c(1,2),pch=c(1,2))
plot(elevels,m[,1,'ad'],ylab='Salary',xlab='Experience (stdized)',ylim=ylim,main='Education: advanced degree')
points(elevels,m[,2,'ad'],col=2,pch=2)
legend('topright',c('Male','Female'),col=c(1,2),pch=c(1,2))
fit.mle= lm(y ~ x[,-1]) #1st column in x is the intercept, already added by lm
b.mle= coef(fit.mle)
summary(fit.mle)
cor(fit.mle$fitted.values,y)^2
cv.mle= kfoldCV.mle(y=y,x=data.frame(x[,-1]),K=10,seed=1)
r2.mle= cor(cv.mle$pred, y)^2
r2.mle
fit.lasso= cv.glmnet(x=x[,-1], y=y, nfolds=10)
fit.lasso
plot(fit.lasso)
length(fit.lasso$lambda)
fit.lasso$lambda.min
plot(fit.lasso$glmnet.fit, xvar='lambda')
b.lasso= as.vector(coef(fit.lasso, s='lambda.min'))
round(b.lasso, 3)
#add your code here
fit.lassobic= lasso.bic(y=y,x=x[,-1],extended = FALSE)
b.lassobic= fit.lassobic$coef
names(fit.lassobic)
fit.lassoebic= lasso.bic(y=y,x=x[,-1],extended = TRUE)
b.lassoebic= fit.lassoebic$coef
names(fit.lassoebic)
#add your code here
#add your code here
cv.lasso= kfoldCV.lasso(y=y,x=x[,-1],K=10,seed=1,criterion="cv")
r2.lassocv= cor(y,cv.lasso$pred)^2
r2.lassocv
#add your answer here
cv.lassobic= kfoldCV.lasso(y=y,x=x[,-1],K=10,seed=1,criterion="bic")
r2.lassobic= cor(y,cv.lassobic$pred)^2
r2.lassobic
#add your code and analysis here
fit.ridge= cv.glmnet(x=x[,-1], y=y, alpha = 0, nfolds=10)
fit.ridge
plot(fit.ridge)
plot(fit.ridge$glmnet.fit, xvar='lambda')
b.ridge= as.vector(coef(fit.ridge, s='lambda.min'))
round(b.ridge, 3)
#add your code and analysis here
cv.ridge= kfoldCV.ridge(y=y,x=x[,-1],K=10,seed=1,criterion="cv")
r2.ridgecv= cor(y,cv.ridge$pred)^2
r2.ridgecv
bols= summary(fit.mle)$coef
pvalue= round(bols[,4],4)
col= ifelse(pvalue < 0.05,'red','black')
data.frame(mle= coef(fit.mle)[-1], lassobic= b.lassobic[-1]) %>%
ggplot(aes(x=mle,y=lassobic)) +
geom_point(col = col[-1],shape = "O",size=2) +
geom_abline(slope=1, intercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0, linetype = 'dotted') +
xlab('OLS') +
ylab('LASSO (Lambda BIC)') +
coord_cartesian(xlim=c(-2,0.5),ylim=c(-2,0.5)) +
theme_classic()
data.frame(mle= coef(fit.mle)[-1], ridgebic= b.ridge[-1]) %>%
ggplot(aes(x=mle,y=ridgebic)) +
geom_point(col = col[-1],shape = "O",size=2) +
geom_abline(slope=1, intercept = 0, linetype = 'dashed') +
geom_hline(yintercept = 0, linetype = 'dotted') +
xlab('OLS') +
ylab('Ridge (Lambda CV)') +
coord_cartesian(xlim=c(-2,0.5),ylim=c(-2,0.5)) +
theme_classic()
#add your code and analysis here
data_logx <- log(read_csv(file.path(PATH, "data/Vessel_X.txt"), col_names = FALSE))
data_y <- read_csv(file.path(PATH, "data/Vessel_Y.txt"), col_names = FALSE)
data_y <- data_y[,1]
colnames(data_logx)<-sprintf("%s%i","F",seq(100,400,1))
colnames(data_y)<-sprintf("%s%i","Y",seq(1,ncol(data_y)))
data<-cbind(data_logx,data_y)
df <- data.frame(frequency = seq(100,400,1), mean = colMeans(data_logx), variance = diag(cov(data_logx)))
p1 <- ggplot(df)+geom_line(aes(y=mean,x=frequency)) + geom_vline(xintercept = c(102, 120, 144, 194, 228, 253, 319, 355,385),col="grey")
# p2 <- ggplot(df)+geom_line(aes(y=variance,x=frequency))+geom_vline(xintercept = c(102, 120, 144, 194, 228, 253, 319, 355,385),col="grey")
p1
# grid.arrange(p1, p2, ncol=2)
low<-data %>%
dplyr::arrange(Y1) %>%
dplyr::slice(1:15) %>%
dplyr::select(-Y1) %>%
summarise_all(median)
high<-data %>%
dplyr::arrange(Y1) %>%
dplyr::slice((n()-15):n()) %>%
dplyr::select(-Y1) %>%
summarise_all(median)
df<-data.frame(frecuencia = seq(100,400,1), bajo = as.numeric(low), alto = as.numeric(high))
ggplot(df,aes(x=frecuencia)) +
geom_line(aes(y=bajo,col="lowest")) +
geom_line(aes(y=alto,col="largest")) +
ylab("Median") +
xlab("Frequency") +
labs(color="Content") +
theme(plot.title = element_text(size = 10, face = "bold"),
legend.position="bottom",
legend.title = element_text(size = 10)) +
geom_vline(xintercept = c(100, 120, 145, 194, 253, 319, 355, 385),col="grey")
mle_vessel <- lm(Y1~., data = data)
summary(mle_vessel)
mle_vessel <- lm(Y1~., data = data[,(302-150):302])
summary(mle_vessel)
cv.mle= kfoldCV.mle(y=data$Y1,x=data[,(302-150):301],K=10,seed=1)
r2.mle= cor(cv.mle$pred, data$Y1)^2
r2.mle
fit.lasso= cv.glmnet(x=as.matrix(data_logx), y=data_y$Y1, nfolds=10)
fit.lasso
b.lasso <- as.vector(coef(fit.lasso, s='lambda.min'))
names(b.lasso) <- c('intercept',colnames(data_logx))
b.lasso[b.lasso!=0]
cv.lassobic= kfoldCV.lasso(x=as.matrix(data_logx), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.lassobic= cor(data_y$Y1,cv.lassobic$pred)^2
r2.lassobic
fit.lasso= cv.glmnet(x=as.matrix(data_logx[,(301-149):30]), y=data_y$Y1, nfolds=10)
cv.lassobic= kfoldCV.lasso(x=as.matrix(data_logx[,(301-149):30]), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.lassobic= cor(data_y$Y1,cv.lassobic$pred)^2
r2.lassobic
fit.ridge= cv.glmnet(x=as.matrix(data_logx), y=data_y$Y1, alpha = 0, nfolds=10)
fit.ridge
b.rigde <- as.vector(coef(fit.ridge, s='lambda.min'))
names(b.rigde) <- c('intercept',colnames(data_logx))
length(b.rigde[b.rigde!=0])
cv.ridge= kfoldCV.ridge(x=as.matrix(data_logx), y=data_y$Y1,K=10,seed=1,criterion="cv")
r2.ridgecv= cor(data_y$Y1,cv.ridge$pred)^2
r2.ridgecv
b.ridge
n= 100  # No. observations
p= 200  # No. features
rho= 0.5  # True pairwise correlation across features
beta= c(rep(0, p - 4), -2/3, 1/3, 2/3, 1)
# Simulate data
sim.data= simdata.cs(seed = 2, n, beta, phi = 1, rho)
X= sim.data[['x']]  # covariates
y= sim.data[['y']]  # response
# Standardise (relevant for glmnet function)
Xstd= scale(X)
ystd= scale(y)
colnames(Xstd)= paste('X', 1:ncol(Xstd), sep = '')
set.seed(123456)
lambda= cv.glmnet(x = Xstd, y = ystd, nfolds = 10)[['lambda.min']]
gfit= glmnet(x = Xstd, y = ystd, standardize = FALSE, lambda = lambda)
b.lasso= coef(gfit)[-1] #estimated coefficients
sel.lasso= (b.lasso != 0)
sum(sel.lasso) #number of selected covariates
lm.afterlasso= lm(y ~ -1 + X[, sel.lasso])
ci.lasso= matrix(0, nrow = p, ncol = 4)
colnames(ci.lasso) = c('estimate','ci_low','ci_upp', 'p_value')
rownames(ci.lasso) = paste("X",1:ncol(X),sep="")
ci.lasso[sel.lasso, 1:3] = cbind(coef(lm.afterlasso), confint(lm.afterlasso))
ci.lasso[sel.lasso, 4]= summary(lm.afterlasso)$coef[,4]
ci.lasso[!sel.lasso,4]= NA
ci.lasso[,1:3]= round(ci.lasso[,1:3], 3)
ci.lasso[,4]= round(ci.lasso[,4], 4)
ci.lasso[sel.lasso, ]
sel.lasso= rep(FALSE, nrow(ci.lasso))
sel.lasso[ci.lasso[,4] < 0.05]= TRUE
table(sel.lasso, beta != 0)
cols= ifelse(beta < ci.lasso[, 2] | beta > ci.lasso[, 3], 2, 1)
plot(1:p, beta, ylim=1.25*range(ci.lasso[,1:3]), xlim=c(0,nrow(ci.lasso)), ylab='95%CI', xlab='', main='Naive LASSO + OLS')
segments(y0 = ci.lasso[, 2], y1 = ci.lasso[, 3], x0 = 1:nrow(ci.lasso), col = cols)
points(1:p, beta, pch = 16)
ci.lassopost= lassopost(y, X, method.lambda='cv')
round(ci.lassopost[ci.lassopost[,1] != 0,], 4)
ci.lassopost= lassopost(y, X, method.lambda='bic')
round(ci.lassopost[ci.lassopost[,1] != 0,], 4)
sel.lassopost= rep(FALSE, nrow(ci.lassopost))
sel.lassopost[ci.lassopost[,4] < 0.05]= TRUE
table(sel.lassopost, beta != 0)
plot(NA, ylim=1.25*range(ci.lasso[,1:3]), xlim=c(0,nrow(ci.lassopost)), ylab='95% CI', xlab='', main='LASSO + PoSI')
grid()
cols= ifelse(beta < ci.lassopost[, 2] | beta > ci.lassopost[, 3], 2, 1)
segments(y0 = ci.lassopost[, 2], y1 = ci.lassopost[, 3], x0 = 1:nrow(ci.lassopost), col = cols)
points(1:p, beta, pch = 16)
bootlasso <- bootLasso(X, y, B = 500, type.boot = "paired", alpha = 0.05)
ci.bootlasso <- t(bootlasso$interval)
df <- data.frame(sprintf("X%s",seq(1:ncol(X))),bootlasso$Beta,ci.bootlasso)
colnames(df) <- c('variable','estimate','ci.low','ci.up')
df[df$estimate != 0,]
sel.bootlasso= rep(TRUE, nrow(df))
sel.bootlasso[(0 >= df$ci.low) & (0 <= df$ci.up)] <- FALSE
table(sel.bootlasso, beta != 0)
plot(NA, ylim=1.25*range(ci.lasso[,1:3]), xlim=c(0,nrow(ci.bootlasso)), ylab='95% CI', xlab='', main='Bootstrap LASSO')
cols= ifelse(beta < ci.bootlasso[, 1] | beta > ci.bootlasso[, 2], 2, 1)
segments(y0 = ci.bootlasso[, 1], y1 = ci.bootlasso[, 2], x0 = 1:nrow(ci.bootlasso), col = cols)
points(1:p, beta, pch = 16)
spam <- read.table(file.path(PATH, 'data/spam.data'), quote="\"", comment.char="")
spam.names <- c(read.table("data/spambase.names", sep = ":", skip = 33, nrows = 53, as.is = TRUE)[,
1], "char_freq_#", read.table("data/spambase.names", sep = ":", skip = 87, nrows = 3,
as.is = TRUE)[, 1], "spam.01")
names(spam) <- spam.names
spam <- spam[sample(nrow(spam)),]
