source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/source/fig/seniorsPerDistrict.R')
width <- 256
height <- 144
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = width,
height=height,
units="px", # inches
res=200) # in ppi (pixels per inch)
print(figure)
dev.off()
width <- 256
height <- 144
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = width,
height=height)
print(figure)
dev.off()
width <- 640
height <- 360
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = width,
height = height)
print(figure)
dev.off()
width <- 640
height <- 360
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = width,
height = height,
res = 200)
print(figure)
dev.off()
HELP(PNG)
help(png)
width <- 480
height <- 480
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = width,
height = height,
type = "cairo_png")
print(figure)
dev.off()
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/source/fig/seniorsPerDistrict.R')
# 5. save it in a PDF format--------
# - do the same as above, but now for pdf format
# tip: use the cairo_pdf device.
saveFileName <- paste0(filename, ".pdf")
cairo_pdf(filename = saveFileName,
width = 4,# inches
height = 3) #inches
print(figure)
dev.off()
# 5. save it in a PDF format--------
# - do the same as above, but now for pdf format
# tip: use the cairo_pdf device.
saveFileName <- paste0(filename, ".pdf")
cairo_pdf(filename = saveFileName,
width = 5,# inches
height = 20/3) #inches
print(figure)
dev.off()
# 5. save it in a PDF format--------
# - do the same as above, but now for pdf format
# tip: use the cairo_pdf device.
saveFileName <- paste0(filename, ".pdf")
cairo_pdf(filename = saveFileName,
width = 20 / 3,# inches
height = 5) #inches
print(figure)
dev.off()
# 4. Save it in png format ---------
# - first set the filename and its extension - png
# - then call the png device with this filename and print the figure,
#   you might want to check height, width and resolution parameters
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = 800, # pixels
height = 450, # pixels
type = "cairo-png")
print(figure)
dev.off()
# 4. Save it in png format ---------
# - first set the filename and its extension - png
# - then call the png device with this filename and print the figure,
#   you might want to check height, width and resolution parameters
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = 1280, # pixels
height = 720, # pixels
type = "cairo-png")
print(figure)
dev.off()
# 4. Save it in png format ---------
# - first set the filename and its extension - png
# - then call the png device with this filename and print the figure,
#   you might want to check height, width and resolution parameters
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = 1280, # pixels
height = 720) # pixels
print(figure)
dev.off()
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/source/fig/seniorsPerDistrict.R')
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/source/fig/seniorsPerDistrict.R')
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
pointsize = 20,
width = 1280, # pixels
height = 720) # pixels
print(figure)
dev.off()
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
pointsize = 30,
width = 1280, # pixels
height = 720) # pixels
print(figure)
dev.off()
# 4. Save it in png format ---------
# - first set the filename and its extension - png
# - then call the png device with this filename and print the figure,
#   you might want to check height, width and resolution parameters
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = 1280, # pixels
height = 720,
pointsize = 20,
res = 300) # pixels
print(figure)
dev.off()
# 4. Save it in png format ---------
# - first set the filename and its extension - png
# - then call the png device with this filename and print the figure,
#   you might want to check height, width and resolution parameters
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = 1280, # pixels
height = 720, # pixels
pointsize = 12,
res = 300) # pixels per inch
print(figure)
dev.off()
# 4. Save it in png format ---------
# - first set the filename and its extension - png
# - then call the png device with this filename and print the figure,
#   you might want to check height, width and resolution parameters
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = 1280, # pixels
height = 720, # pixels
res = 300) # pixels per inch
print(figure)
dev.off()
# 4. Save it in png format ---------
# - first set the filename and its extension - png
# - then call the png device with this filename and print the figure,
#   you might want to check height, width and resolution parameters
filename <- 'fig/seniorsPerDistrict'
saveFileName <- paste0(filename, ".png")
png(filename = saveFileName,
width = 1280, # pixels
height = 720, # pixels
res = 200) # pixels per inch
print(figure)
dev.off()
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/run_me.R')
?source
load('processed/procData.RData')
debug(corPopulationSeniors)
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/run_me.R')
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/run_me.R')
View(corPopulationSeniors)
debug(corPopulationSeniors)
corPopulationSeniors(c("Rugby, Warwick, Stratford-on-Avon"))
getwd()
aging$District
# evaluate the function for the districts of your choice:
corPopulationSeniors(c("Rugby", "Warwick", "Stratford-on-Avon"))
figure
# Exercise: BLAH
# change the working directory to your own
setwd("/Users/jordi/Desktop/PhD/TA/R_Brushup/exercises/Rdata/")
# 1. Data pre-processing
source('source/processed/processData.R')
# 2. Perform some basic data analysis
source('source/analysis/demographics.R')
# 3. Produce figures illustrating percentage of seniors in each district
source('source/fig/seniorsPerDistrict.R')
# 4. Produce figure illustrating correlation between population size and
# percentage of seniors.
source('source/fig/corPopulationSeniors.R')
debug(corPopulationSeniors)
# evaluate the function for the districts of your choice:
corPopulationSeniors(c("Rugby", "Warwick", "Stratford-on-Avon"))
View(figure)
plot(figure)
load('processed/procData.RData')
View(aging)
install.packages('stargazer')
library(stargazer)
stargazer(aattitude)
stargazer(attitude)
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
stargazer(aging[1:4, ], summary=FALSE)
stargazer(aging[1:4, 5:8], summary=FALSE)
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
stargazer(aging[1:4, 5:8], summary=F, rownames = F)
rm(list=ls())
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
stargazer(aging[1:4, 5:8], summary=F, rownames = F)
?stargazer
rm(list=ls())
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
labels <- c(
"Stratford-on-Avon" = "Strat. Avon",
"Nuneaton & Bedworth" = "Nun. Bedw.",
"North Warwickshire" = "N. Warwick."
)
# create a short for loop that would iterate over the labels vector,
# check for those elements in the District variable (in the aging data frame)
# that have value on the left hand side (element names) and change it with
# the value on the right hand side (elements in the labels vector)
for (i in names(labels)) {
aging$District[ which( aging$District == i ) ] <- labels[i]
}
stargazer(aging[1:4, 5:8], summary=F, rownames = F)
# To compute some summary statistics
stargazer(aging)
ols2 <- lm(Population ~ Seniors + District, data = aging)
summary(ols2)
unique(aging$District)
# create table
stargazer(ols1, ols2, lr, title = "Results", align=TRUE)
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/source/tables/statsOutput.R')
?stargazer
# create table
stargazer(ols1, ols2, lr, title = "Results", align=TRUE, out='tables/regResults.tex')
?glm
rm(list=ls())
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
labels <- c(
"Stratford-on-Avon" = "Strat. Avon",
"Nuneaton & Bedworth" = "Nun. Bedw.",
"North Warwickshire" = "N. Warwick."
)
for (i in names(labels)) {
aging$District[ which( aging$District == i ) ] <- labels[i]
}
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
stargazer(aging[1:4, 5:8], summary=F, rownames = F)
# To compute some summary statistics (it ignores non-numeric columns)
stargazer(aging)
# Create a simple regression table with 3 side-by-side models:
# 1. OLS Population (y) on Seniors (x).
# 2. OLS Population (y) on Seniors (x) controlling by Districts
# 3. Logistic regression High Population (y) on Seniors (x) controlling by Districts,
# where High Population = Population > median(Population).
# Create High Population as new column
aging$HighPopulation <- as.numeric(aging$Population > median(aging$Population))
# OLS 1:
ols1 <- lm(Population ~ Seniors, data = aging)
# OLS 2:
ols2 <- lm(Population ~ Seniors + District, data = aging)
# Logistic Regression:
lr <- glm(HighPopulation ~ Seniors + District, data = aging,
family = binomial( link = 'logit'))
# create table
stargazer(ols1, ols2, lr, title = "Results", align=TRUE, out='tables/regResults.tex')
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/source/tables/statsOutput.R')
stargazer(aging)
# To compute some summary statistics (it ignores non-numeric columns)
x <- stargazer(aging)
x
summary(aging)
help("stargazer")
apply(aging, 2, is.numeric)
# which is equivalent to
agingNumeric <- aging[, apply(aging, 2, is.numeric)]
rm(list=ls())
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
labels <- c(
"Stratford-on-Avon" = "Strat. Avon",
"Nuneaton & Bedworth" = "Nun. Bedw.",
"North Warwickshire" = "N. Warwick."
)
for (i in names(labels)) {
aging$District[ which( aging$District == i ) ] <- labels[i]
}
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
stargazer(aging[1:4, 5:8], summary=F, rownames = F,
out = 'tables/dataExploration.tex')
# To compute some summary statistics (it ignores non-numeric columns)
stargazer(aging, out = 'tables/summaryStats')
# which is equivalent to
agingNumeric <- aging[, apply(aging, 2, is.numeric)]
apply(aging, 2, is.numeric)
is.numeric(aging$Population)
lapply(aging, is.numeric)
unlist(lapply(aging, is.numeric))
# which is equivalent to
agingNumeric <- aging[, unlist(lapply(aging, is.numeric))]
apply(agingNumeric, 2, is.na)
apply(agingNumeric, 2, function(x) sum(!is.na(x)))
quantile(agingNumeric$Population)
quantile(agingNumeric$Population, probs = '.25')
quantile(agingNumeric$Population, probs = .25)
rm(list=ls())
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
labels <- c(
"Stratford-on-Avon" = "Strat. Avon",
"Nuneaton & Bedworth" = "Nun. Bedw.",
"North Warwickshire" = "N. Warwick."
)
for (i in names(labels)) {
aging$District[ which( aging$District == i ) ] <- labels[i]
}
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
stargazer(aging[1:4, 5:8], summary=F, rownames = F,
out = 'tables/dataExploration.tex')
# To compute some summary statistics (it ignores non-numeric columns)
stargazer(aging, out = 'tables/summaryStats')
# which is equivalent to
agingNumeric <- aging[, unlist(lapply(aging, is.numeric))]
summaryStats <- data.frame(
N = apply(agingNumeric, 2, function(x) sum(!is.na(x))),
Mean = apply(agingNumeric, 2, mean),
`St. Dev` = apply(agingNumeric, 2, sd),
Min = apply(agingNumeric, 2, min),
`Pctl(25)` = apply(agingNumeric, 2, quantile, probs=.25),
`Pctl(75)` = apply(agingNumeric, 2, quantile, probs=.75),
Max = apply(agingNumeric, 2, max)
)
View(summaryStats)
round(summaryStats, 3)
rm(list=ls())
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
labels <- c(
"Stratford-on-Avon" = "Strat. Avon",
"Nuneaton & Bedworth" = "Nun. Bedw.",
"North Warwickshire" = "N. Warwick."
)
for (i in names(labels)) {
aging$District[ which( aging$District == i ) ] <- labels[i]
}
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
stargazer(aging[1:4, 5:8], summary=F, rownames = F,
out = 'tables/dataExploration.tex')
# To compute some summary statistics (it ignores non-numeric columns)
stargazer(aging, out = 'tables/summaryStats')
# which is equivalent to
agingNumeric <- aging[, unlist(lapply(aging, is.numeric))]
summaryStats <- data.frame(
N = apply(agingNumeric, 2, function(x) sum(!is.na(x))),
Mean = apply(agingNumeric, 2, mean),
`St. Dev` = apply(agingNumeric, 2, sd),
Min = apply(agingNumeric, 2, min),
`Pctl(25)` = apply(agingNumeric, 2, quantile, probs=.25),
`Pctl(75)` = apply(agingNumeric, 2, quantile, probs=.75),
Max = apply(agingNumeric, 2, max)
)
summaryStats <- round(summaryStats, 3)
View(summaryStats)
View(summaryStats)
summaryStats <- data.frame(
N = apply(agingNumeric, 2, function(x) sum(!is.na(x))),
Mean = apply(agingNumeric, 2, mean),
St.Dev = apply(agingNumeric, 2, sd),
Min = apply(agingNumeric, 2, min),
`Pctl(25)` = apply(agingNumeric, 2, quantile, probs=.25),
`Pctl(75)` = apply(agingNumeric, 2, quantile, probs=.75),
Max = apply(agingNumeric, 2, max)
)
summaryStats <- round(summaryStats, 3)
summaryStats
summaryStats <- data.frame(
N = apply(agingNumeric, 2, function(x) sum(!is.na(x))),
Mean = apply(agingNumeric, 2, mean),
St.Dev = apply(agingNumeric, 2, sd),
Min = apply(agingNumeric, 2, min),
`Pctl_25` = apply(agingNumeric, 2, quantile, probs=.25),
`Pctl_75` = apply(agingNumeric, 2, quantile, probs=.75),
Max = apply(agingNumeric, 2, max)
)
summaryStats <- round(summaryStats, 3)
summaryStats
rm(list=ls())
# Load/Install stargazer to produce nice R regression outputs
if (!require(stargazer)) install.packages("stargazer") else library(stargazer)
# Load the data
load('processed/procData.RData')
labels <- c(
"Stratford-on-Avon" = "Strat. Avon",
"Nuneaton & Bedworth" = "Nun. Bedw.",
"North Warwickshire" = "N. Warwick."
)
for (i in names(labels)) {
aging$District[ which( aging$District == i ) ] <- labels[i]
}
# To output the contents of the first four rows of some data frame,
# specify the part of the data you would like to use, and set the
# summary option to FALSE:
stargazer(aging[1:4, 5:8], summary=F, rownames = F,
out = 'tables/dataExploration.tex')
# To compute some summary statistics (it ignores non-numeric columns)
stargazer(aging, out = 'tables/summaryStats')
# which is equivalent to
agingNumeric <- aging[, unlist(lapply(aging, is.numeric))]
summaryStats <- data.frame(
N = apply(agingNumeric, 2, function(x) sum(!is.na(x))),
Mean = apply(agingNumeric, 2, mean),
St.Dev = apply(agingNumeric, 2, sd),
Min = apply(agingNumeric, 2, min),
`Pctl_25` = apply(agingNumeric, 2, quantile, probs=.25),
`Pctl_75` = apply(agingNumeric, 2, quantile, probs=.75),
Max = apply(agingNumeric, 2, max)
)
summaryStats <- round(summaryStats, 3)
# Create a simple regression table with 3 side-by-side models:
# 1. OLS Population (y) on Seniors (x).
# 2. OLS Population (y) on Seniors (x) controlling by Districts
# 3. Logistic regression High Population (y) on Seniors (x) controlling by Districts,
# where High Population = Population > median(Population).
# Create High Population as new column
aging$HighPopulation <- as.numeric(aging$Population > median(aging$Population))
# OLS 1:
ols1 <- lm(Population ~ Seniors, data = aging)
# OLS 2:
ols2 <- lm(Population ~ Seniors + District, data = aging)
# Logistic Regression:
lr <- glm(HighPopulation ~ Seniors + District, data = aging,
family = binomial( link = 'logit'))
# create tex table and save it in tables/ as regResults.tex.
stargazer(ols1, ols2, lr,
title = "Results", align=TRUE, out='tables/regResults.tex')
# we can also report the content of vectors and matrices.
# For instance, let's create a table that contains the correlation matrix
# for Population, Seniors and PopulationSeniors.
correlation.matrix <- cor(aging[, c('Population','Seniors','PopulationSeniors')])
stargazer(correlation.matrix, title = 'Correlation Matrix',
out = 'tables/corMatrix.tex')
# Alternatively, if you do not want to use latex and just see the results in Rstudio,
# you could simply save the objects of interest as an .Rdata file that you can
# retrieve later:
save(summaryStats, ols1, ols2, lr, correlation.matrix,
file = 'tables.Rdata')
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/run_me.R')
source('~/Desktop/PhD/TA/R_Brushup/exercises/Rdata/main.R')
load('tables/tables.Rdata')
load('tables/tables.Rdata')
View(summaryStats)
View(ols2)
View(ols1)
View(lr)
